// As simple as it gets: 1-core system with 2 short processes
sys = {
    cores = {
        simpleCore = {
            type = "Simple";
            dcache = "l1d";
            icache = "l1i";
        };
    };

    lineSize = 64;

    caches = {
        l1d = {
            size = 65536;
        };
        l1i = {
            size = 32768;
        };
        l2 = {
            type = "Simple";
            array = {
                type = "SetAssoc";
                ways = 8;
            };
            repl = {
                type = "LRU";
            };
            caches = 1;
            size = 32768;
            children = "l1i|l1d";  // interleave
            latency = 5;
            wrLatency = 20;
            //nonInclusiveHack = true;
        }; 
        l3 = {
            // cache type
            type = "Hybrid"; // using hybrid cache, which has normal latency and slow latency
            array = {
                type = "SetAssoc";
                ways = 32;
            };
            repl = {
                type = "NMRU"; // use NMRU replacement policy to implement hybrid cache
            };
            caches = 1;
            size = 67108864;
            children = "l2";

            // cache latency
            latency = 20; // SRAM read latency
            slowLatency = 25; // XRAM read latency
            wrLatency = 20; // SRAM write latency
            slowWrLatency = 50; // XRAM write latency
            
            // dirty MRU writeback
            dirtyWb = true;
        };
    };
};

sim = {
    phaseLength = 10000;
    schedQuantum = 50;  // switch threads frequently
    procStatsFilter = "l1.*|l2.*";
};

process0 = {
    command = "ls ../*";
};
process1 = {
    command = "ls ../*";
};
process2 = {
    command = "ls -alh --color ../../*";
};
process3 = {
    command = "ls -alh --color ../../*";
};
process4 = {
    command = "ls -alh --color ../../*";
};
process5 = {
    command = "ls -alh --color ../../*";
};
process6 = {
    command = "ls -alh --color ../../*";
};
process7 = {
    command = "ls -alh --color ../../*";
};
